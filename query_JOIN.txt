1. Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia

    SELECT students.name, students.surname, degrees.name
    FROM students
    INNER JOIN degrees
    ON students.degree_id = degrees.id
    WHERE degrees.name = 'Corso di Laurea in Economia';

2. Selezionare tutti i Corsi di Laurea Magistrale del Dipartimento di Neuroscienze

    SELECT degrees.id, degrees.name, degrees.level, departments.id, departments.name
    FROM degrees
    INNER JOIN departments
    ON degrees.department_id = departments.id
    WHERE  degrees.level = 'magistrale' AND departments.name = 'Dipartimento di Neuroscienze';

3. Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44)

    SELECT courses.name, courses.cfu, teachers.surname, teachers.name
    FROM courses
    JOIN course_teacher
    ON courses.id = course_teacher.course_id
    JOIN teachers
    ON course_teacher.teacher_id = teachers.id
    WHERE teachers.id = 44

4. Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui sono iscritti e il relativo dipartimento, in ordine alfabetico per cognome e nome

    SELECT students.surname, students.name, students.registration_number, degrees.id, degrees.name, departments.id, departments.name
    FROM students
    INNER JOIN degrees
    ON students.degree_id = degrees.id
    INNER JOIN departments
    ON degrees.department_id = departments.id
    ORDER BY students.surname ASC;

5. Selezionare tutti i corsi di laurea con i relativi corsi e insegnanti

    SELECT DISTINCT teachers.id, teachers.surname, teachers.name , courses.name AS corso, courses.cfu, degrees.name AS corso_di_laurea
    FROM teachers
    INNER JOIN course_teacher
    ON teachers.id = course_teacher.teacher_id
    INNER JOIN courses
    ON course_teacher.course_id = courses.id
    INNER JOIN degrees
    ON courses.degree_id = degrees.id  
    ORDER BY `corso_di_laurea` ASC

6. Selezionare tutti i docenti che insegnano nel Dipartimento di Matematica (54)

    SELECT DISTINCT teachers.name AS insegnante , departments.name AS dipartimento
    FROM teachers
    INNER JOIN course_teacher
    ON teachers.id = course_teacher.teacher_id
    INNER JOIN courses
    ON course_teacher.course_id = courses.id
    INNER JOIN degrees
    ON courses.degree_id = degrees.id
    INNER JOIN departments
    ON degrees.department_id = departments.id
    WHERE departments.name = 'Dipartimento di Matematica';

7. BONUS: Selezionare per ogni studente il numero di tentativi sostenuti per ogni esame, stampando anche il voto massimo. Successivamente, filtrare i tentativi con voto minimo 18.

    SELECT students.id, students.name, students.surname , courses.id, courses.name, COUNT(exams.id) AS n_tentativi, MAX(exam_student.vote) AS voto_massimo
    FROM students
    INNER JOIN exam_student
    ON students.id = exam_student.student_id
    INNER JOIN exams
    ON exam_student.exam_id = exams.id
    INNER JOIN courses
    ON exams.course_id = courses.id
    GROUP BY students.id, students.name, students.surname, courses.id, courses.name
    HAVING MAX(exam_student.vote) >= 18;